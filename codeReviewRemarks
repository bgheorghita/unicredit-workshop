pfm-crud - update also in pom.xml
APIExceptionHandler
- add static import for HttpStatus.* and DefaultExceptionMessages
- move DefaultExceptionMessages in a separate package > exceptions.constants
DefaultExceptionMessages 
- remove getMessage - not used

CategoryService
- save:  is really needed a new object: savedCategory, in order just to return it?
- update: please rewrite as follows since we should avoid null object: (! do this in all similar situations) 
 Optional<Category> categoryParent = categoryRepository.findById(id);
        categoryParent.ifPresent(categoryToUpdate::setParent);

TransactionService
- updateTransactionCategory - duplicate message

pfm-report
CustomerReportEntry - reformat each attibute on a line
public record CustomerReportEntry(String categoryName, 
                                  BigDecimal amount, 
                                  Float percentage,
                                  List<CustomerReportEntry> subcategories) {

CustomerReport
- no need for initializer
- rename addRecord to addEntry

CustomerReportService
- replace for with forEach:         transactions.forEach(transaction -> addToCategoryStatistics(transaction.getCategory(), transaction.getAmount(), categoryStatistics));
- add static import for ObjectUtils.*
- please avoid sending a parameter and then use it in the parent method for ex: computePercentages > computePercentage from computePercentage you can return percentagesIndexedByCategory and declare it at computePercentage level

    private Map<CategoryDetails, Float> computePercentages(Map<CategoryDetails, BigDecimal> statistics) {
        BigDecimal totalAmount = computeTotalAmount(statistics);

       return  computePercentage(statistics, totalAmount);
    }

private  Map<CategoryDetails, Float> computePercentage(Map<CategoryDetails, BigDecimal> statistics, BigDecimal totalAmount) {
        Map<CategoryDetails, Float> percentagesIndexedByCategory = new HashMap<>();
        for (Map.Entry<CategoryDetails, BigDecimal> entry : statistics.entrySet()) {
            BigDecimal categoryAmount = entry.getValue();
            BigDecimal percentage;
            CategoryDetails parentCategory = entry.getKey().getParent();

            if (!ObjectUtils.isEmpty(parentCategory)) {
                percentage = categoryAmount.divide(totalAmount, 4, RoundingMode.HALF_UP)
                        .multiply(BigDecimal.valueOf(100));
            } else {
                percentage = BigDecimal.valueOf(100);
            }

            percentagesIndexedByCategory.put(entry.getKey(), percentage.floatValue());
        }
        return percentagesIndexedByCategory;
    }

pfm-classifier
- add static import for HttpStatus.* and DefaultExceptionMessages
- move DefaultExceptionMessages in a separate package > exceptions.constants
DefaultExceptionMessages 

ResponseKeywordWithOccurrencesDto
- Generating equals/hashCode implementation but without a call to superclass, this should be avoided

AutoClassifierService
- add static import for ObjectUtils.*, DefaultExceptionMessages.*
- getResponseKeywordWithOccurrencesDto -> why Integer and not int?

###########################################################################################################################################################################################################

!! rename all microservices so they are consistent

PFM -> rename so it clearer

APIExceptionHandler

create enum with DEFAULT_NOT_FOUND_MSG, DEFAULT_UNEXPECTED_ERROR_MSG

RequestKeywordMapper
remove toDto

ResponseCategoryMapper
remove toEntity

ResponseKeywordMapper
remove toEntity

CategoryService
deleteById - please rewrite the function so it is clearer , also, do not call findById from service, but from repository 
update - do not call method from service, but from repository

KeywordService
deleteById - use repository function

TransactionService
- order methods based on access modifier: first public, then private
- getAssociatedCategory
- do not send the entire existingTransaction -  only what you need (in this case the category)
 - use ObjectUtils.isNotEmpty, also you can rewrite as follows:
       private Category getAssociatedCategory(RequestTransactionDto requestTransactionDto, Category category) {
        return categoryRepository.findById(requestTransactionDto.getCategoryId())
                .orElse(category);
    }

- getAssociatedKeyword, getAssociatedParent - same as getAssociatedCategory 

- splitTransaction 
- do not use != null

pfm-report
- remove AppConfigurations

CustomerReport -> rename addRecord & parametor so there is no reserved keystore ex: addEntry & entry
TransactionAmount -> not needed
CustomerReportService
- computePercentages - line 92&93 refactor: 
            BigDecimal totalAmount = computeTotalAmount(statistics, BigDecimal.ZERO);
- computePercentage - revriew 

 BigDecimal percentage =   percentage = BigDecimal.valueOf(100);
            CategoryDetails parentCategory = entry.getKey().getParent();

            if (!ObjectUtils.isEmpty(parentCategory)) {
                percentage = categoryAmount.divide(totalAmount, 4, RoundingMode.HALF_UP)
                        .multiply(BigDecimal.valueOf(100));
            } 

- computeTotalAmount - remove totalAmount from parameters and return it directly
- computeSubcategoriesEntries - no need of variable record

trx-clasifier 
APIExceptionHandler - create enum for error messages

in service > dtos > requests nothing is used

AutoClassifierService
line 20&21 change order it is in standard
BASE_CATEGORIES_URL - fill complete path, don't build it since you use it only at line 31, build dinamically, only parameter part, same for BASE_KEYWORDS_URL
classifyByTxDescriptionV2 
- txId not used
- line 58 - do not throw RuntimeException

WordUtils
-  extract [\s-,.*] in global variable and use it also in AutoClassifierService



###########################################################################################################################################################################################################

pfm-report

OpenApiConfiguration,java > remove
rename PFM project to somethins more suggestive

CustomerReportService.java 
- line 29, 70, 98, 109 - use ObjecUtils.isNotEmpty()
- line 53, no need of new object
- line 64 - format like: 
private List<CustomerReportRecord> computeSubcategoriesEntries(CategoryDetails parentCategory,
                                Map<CategoryDetails, BigDecimal> categoryStatistics, 
                                Map<CategoryDetails, Float> percentagesIndexedByCategory)
- line 77 -  no need of new object
- line 89 - isParentCategory not required, used in only one place
- line 96 to 100 - extract to new function computeTotalAmount
- line 109 to 114  - extract to new function computePercentage 

pfm - rename to something clearer

KeywordController -
- findAll - move logic to service 

APIExceptionHandler 
- use Slf4j instead of   ex.printStackTrace();
- reorder private final static in order to comply java standard
- remove unused imports

Category Repository -> you can model the relationship in the entity if you set one of the annotations OneToOne, OneToMane, etc.... and on the mentioned entity you will also have the related entity, no need for explicit join

RequestKeywordMapper
- toDto and toKeywordDtoList - not used, remove them

RequestTransactionMapper
- toDto  - not used, remove it

ResponseKeywordMapper - toEntity not used, remove it

ResponseTransactionMapper - toEntity not used, remove it

CategoryService 
- findAll - format on multiple lines

KeywordService  
- deleteById -> what happens if category is not found

TransactionService
- sparse update method as: 55 - 59 one method, 60 - 64 another method, 66 - 71 another method
- create method> updateExistingTransaction where you update the existing transaction

APIExceptionHandler
- change order private final static in order to comply to java standard

ResponseKeywordDto
    public Long categoryId; - change to private

AutoClassifierController 
- remove unused imports
- move URL on application.properties
- use ObjectUtils.isEmpty when test ==null

classifyByTxDescriptionV2 
- long txId not used
- line 51 - keywordsResponse.getBody() - might be empty

classifyV2
- at builder 
   - extract categoryCount.entrySet().stream()
                        .max(Map.Entry.comparingByValue())
                        .map(Map.Entry::getKey)
                        .orElse(null) to a  method
  - extract keywords.stream().map(responseKeywordDto ->
                        new ResponseKeywordWithOccurrencesDto(responseKeywordDto,keywordCount.get(responseKeywordDto.getId()).toList())
